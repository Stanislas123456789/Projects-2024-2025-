import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import *
import numpy as np

class SimTradeBot:
    def __init__(self):
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        service = Service(r"C:\Program Files\Google\chromedriver-win64\chromedriver.exe")
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)
        
         # Trading parameters
        self.base_quantity = 5000
        self.max_position = 100
        self.min_spread = 0.02
        self.position_scale = 0.02
        self.price_history = []
        self.volatility = 0
        self.market_trend = 0
        
        # News parameters
        self.last_news_time = time.time()
        self.news_check_interval = 1  # Vérifier plus fréquemment
        self.news_impact_duration = 20  # Impact réduit à 3 minutes pour être plus réactif
        self.current_news_bias = 0
        self.news_history = []  # Pour tracker les news déjà vues
        
        # Impact parameters
        self.strong_impact = 5  # Fort impact positif
        self.medium_impact = 10  # Impact positif moyen
        self.weak_impact = 1    # Faible impact positif
        self.max_position_multiplier = 20  # Pour augmenter temporairement la position max
        
    def login(self):
        max_retries = 3
        retry_delay = 0.2
        
        for attempt in range(max_retries):
            try:
                self.driver.get("https://www.simtrade.fr/CCMP/ESSEC_BBA/site/certifications/certifications_presentation.php?n=C&c=CERTIF2_US_FINANCE_ESSEC_BBA_2024_09&p=ESSEC2&lang=us#")
                
                # Wait for and click login button
                login_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.LINK_TEXT, 'LOG IN'))
                )
                login_button.click()
                
                # Fill in credentials
                username = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, 'nom_v3'))
                )
                username.clear()
                username.send_keys('B00805678@essec.edu')
                
                password = WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.ID, 'motdepasse_v3'))
                )
                password.clear()
                password.send_keys('@Stan1244')
                
                # Submit login
                submit = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//input[@value='Log in']"))
                )
                submit.click()
                
                time.sleep(2)
                return True
                
            except Exception as e:
                print(f"Login attempt {attempt + 1} failed: {e}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
                    continue
                else:
                    raise

    def access_simulation(self):
        max_retries = 3
        retry_delay = 1
        
        for attempt in range(max_retries):
            try:
                # Navigate to Market Making simulation with explicit waits
                contests_link = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable(
                        (By.XPATH, "//a[contains(@href, 'challenges_presentation_certificat.php') and contains(., 'CONTESTS')]")
                    )
                )
                contests_link.click()
                
                simulation_link = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable(
                        (By.XPATH, "//a[contains(@href, 'CONC_EZP7_US_V7_ESSEC_BBA')]")
                    )
                )
                simulation_link.click()
                
                time.sleep(2)
                
                launch_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable(
                        (By.XPATH, "//input[@value='Launch the simulation']")
                    )
                )
                launch_button.click()
                
                time.sleep(3)
                return True
                
            except Exception as e:
                print(f"Simulation access attempt {attempt + 1} failed: {e}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
                    continue
                else:
                    raise

    def safe_parse_int(self, text):
        """Safely parse integer values that might contain spaces or other characters"""
        try:
            # Remove spaces and any other non-numeric characters except minus sign
            cleaned = ''.join(c for c in text if c.isdigit() or c == '-')
            return int(cleaned)
        except (ValueError, TypeError):
            return 0
            
    def safe_parse_float(self, text):
        """Safely parse float values that might contain spaces or other characters"""
        try:
            # Remove spaces and convert comma to dot if present
            cleaned = text.replace(' ', '').replace(',', '.')
            return float(cleaned)
        except (ValueError, TypeError):
            return 0.0

    def analyze_news(self, news_text):
        if not news_text or news_text in self.news_history:
            return 0
        
        self.news_history.append(news_text)
        if len(self.news_history) > 10:  # Garder seulement les 10 dernières news
            self.news_history.pop(0)
        
        news_bias = 0
        
        # Recommandations d'analystes - Impact Fort
        if any(phrase in news_text for phrase in [
            "raises his recommandation to \"Buy\"",
            "changes her recommandation to \"Buy\"",
            "target price of €14",
            "target price of €13"
        ]):
            news_bias = self.strong_impact
            print(f"Strong buy signal detected: {news_text}")
        
        # Résultats financiers - Impact Moyen
        elif "profits of M€180" in news_text and "consensus: profits of M€150" in news_text:
            news_bias = self.medium_impact
            print(f"Positive earnings surprise detected: {news_text}")
        
        # Données macro-économiques - Impact Moyen
        elif "EU GDP: +1%" in news_text and "consensus: 0%" in news_text:
            news_bias = self.medium_impact
            print(f"Positive GDP surprise detected: {news_text}")
        
        # Événements négatifs - Impact Fort Négatif
        elif "hacking of the booking website" in news_text:
            news_bias = -self.strong_impact
            print(f"Negative event detected: {news_text}")
        
        if news_bias != 0:
            self.last_news_time = time.time()
            self.current_news_bias = news_bias
        
        return news_bias

    def adjust_orders_for_news(self, base_quantity, position):
        current_time = time.time()
        time_since_news = current_time - self.last_news_time
        
        if time_since_news < self.news_impact_duration and self.current_news_bias != 0:
            # Impact dégressif plus sophistiqué
            impact_factor = np.exp(-3 * time_since_news / self.news_impact_duration)
            news_quantity_adjustment = int(base_quantity * impact_factor * abs(self.current_news_bias))
            
            # Ajustement asymétrique selon la direction du signal
            if self.current_news_bias > 0:
                # Signal positif: augmenter les achats, réduire les ventes
                buy_quantity = int(base_quantity * (1 + impact_factor * self.current_news_bias))
                sell_quantity = int(base_quantity * (1 - impact_factor * self.current_news_bias * 0.5))
            else:
                # Signal négatif: augmenter les ventes, réduire les achats
                buy_quantity = int(base_quantity * (1 + impact_factor * self.current_news_bias * 0.5))
                sell_quantity = int(base_quantity * (1 - impact_factor * self.current_news_bias))
            
            # Ajuster les quantités en fonction de la position actuelle
            position_ratio = position / self.max_position
            if position_ratio > 0.5 and self.current_news_bias > 0:
                # Réduire les achats si déjà très long
                buy_quantity = int(buy_quantity * (1 - position_ratio))
            elif position_ratio < -0.5 and self.current_news_bias < 0:
                # Réduire les ventes si déjà très court
                sell_quantity = int(sell_quantity * (1 + position_ratio))
            
            return buy_quantity, sell_quantity
        
        return base_quantity, base_quantity

    def calculate_dynamic_position_adjustment(self, position):
        """Calculate position-based order size adjustments with news impact"""
        position_ratio = position / (self.max_position * (1 + abs(self.current_news_bias) * self.max_position_multiplier))
        
        # Ajustement de base selon la position
        if position > 0:
            buy_adjust = max(0.3, 1 - position_ratio)
            sell_adjust = min(1.7, 1 + position_ratio)
        else:
            buy_adjust = min(1.7, 1 - position_ratio)
            sell_adjust = max(0.3, 1 + position_ratio)
        
        # Ajustement supplémentaire basé sur les news
        if self.current_news_bias != 0:
            news_impact = abs(self.current_news_bias)
            if self.current_news_bias > 0:
                buy_adjust *= (1 + news_impact)
                sell_adjust *= (1 - news_impact * 0.5)
            else:
                buy_adjust *= (1 - news_impact * 0.5)
                sell_adjust *= (1 + news_impact)
        
        return buy_adjust, sell_adjust

    def adjust_spreads(self, best_bid, best_ask, position):
        mid_price = (best_bid + best_ask) / 2
        self.calculate_volatility(mid_price)
        
        # Spread de base avec volatilité
        dynamic_spread = max(self.min_spread, self.volatility * 2)
        
        # Facteur de position ajusté avec les news
        position_factor = abs(position) / (self.max_position * (1 + abs(self.current_news_bias) * 0.5))
        
        # Impact des news sur les spreads
        news_factor = abs(self.current_news_bias) * 0.02
        direction_factor = 1 if self.current_news_bias > 0 else -1
        
        if position > 0:  # Position longue
            bid_spread = dynamic_spread * (1 + position_factor * 2 + news_factor)
            ask_spread = dynamic_spread * (1 - position_factor * 0.5 + news_factor)
            # Ajuster les spreads selon la direction des news
            if direction_factor > 0:
                ask_spread *= 0.8  # Faciliter la prise de position longue
            else:
                bid_spread *= 0.8  # Faciliter la réduction de position
        else:  # Position courte
            bid_spread = dynamic_spread * (1 - position_factor * 0.5 + news_factor)
            ask_spread = dynamic_spread * (1 + position_factor * 2 + news_factor)
            if direction_factor < 0:
                bid_spread *= 0.8  # Faciliter la prise de position courte
            else:
                ask_spread *= 0.8  # Faciliter la réduction de position
            
        return bid_spread, ask_spread

    def market_making_strategy(self):
        last_update_time = time.time()
        last_news_check = time.time()
        update_interval = 1
        
        while True:
            try:
                current_time = time.time()
                
                # Vérification plus fréquente des news
                if current_time - last_news_check >= self.news_check_interval:
                    news_text = self.read_news()
                    self.analyze_news(news_text)
                    last_news_check = current_time
                
                if current_time - last_update_time >= update_interval:
                    best_bid, best_ask, bids, asks = self.get_order_book_data()
                    position = self.get_position()
                    
                    if best_bid and best_ask:
                        bid_spread, ask_spread = self.adjust_spreads(best_bid, best_ask, position)
                        bid_price = round(best_bid - bid_spread, 2)
                        ask_price = round(best_ask + ask_spread, 2)
                        
                        buy_quantity, sell_quantity = self.calculate_order_quantity(position)
                        
                        # Ajustement en cas de news significative
                        if abs(self.current_news_bias) >= self.medium_impact:
                            if self.current_news_bias > 0:
                                bid_price = round(best_bid - bid_spread * 0.8, 2)  # Être plus agressif à l'achat
                            else:
                                ask_price = round(best_ask + ask_spread * 0.8, 2)  # Être plus agressif à la vente
                        
                        # Gestion des positions extrêmes
                        max_adjusted_position = self.max_position * (1 + abs(self.current_news_bias) * self.max_position_multiplier)
                        if abs(position) > max_adjusted_position:
                            if position > 0:
                                ask_price = best_bid
                                sell_quantity = position // 2
                                buy_quantity = 0
                            else:
                                bid_price = best_ask
                                buy_quantity = abs(position) // 2
                                sell_quantity = 0
                        
                        self.cancel_all_orders()
                        time.sleep(0.2)
                        
                        if buy_quantity > 0:
                            self.place_order("buy", bid_price, buy_quantity)
                        if sell_quantity > 0:
                            self.place_order("sell", ask_price, sell_quantity)
                        
                        print(f"Orders placed - Bid: {bid_price} ({buy_quantity}), Ask: {ask_price} ({sell_quantity}), Position: {position}, News Bias: {self.current_news_bias}")
                        last_update_time = current_time
                
                time.sleep(0.2)
                
            except KeyboardInterrupt:
                print("\nBot stopped by user")
                break
            except Exception as e:
                print(f"Error in market making strategy: {e}")
                time.sleep(1)
                
        def calculate_order_quantity(self, position):
                position_factor = abs(position) / self.max_position
                adjusted_quantity = int(self.base_quantity * (1 + position_factor * 2))
                return max(100, adjusted_quantity)

        def place_order(self, side, price, quantity):
                max_retries = 3
                retry_delay = 0.2
                
                for attempt in range(max_retries):
                    try:
                        quantity_field = WebDriverWait(self.driver, 5).until(
                            EC.presence_of_element_located((By.ID, 'montant_ordre'))
                        )
                        quantity_field.clear()
                        quantity_field.send_keys(str(quantity))
                        
                        order_type = Select(WebDriverWait(self.driver, 5).until(
                            EC.presence_of_element_located((By.ID, 'type_ordre'))
                        ))
                        order_type.select_by_value('LIM')
                        
                        price_field = WebDriverWait(self.driver, 5).until(
                            EC.presence_of_element_located((By.ID, 'limite_ordre'))
                        )
                        price_field.clear()
                        price_field.send_keys(str(price))
                        
                        button_value = "Buy" if side == "buy" else "Sell"
                        order_button = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable(
                                (By.XPATH, f"//input[@value='{button_value}']")
                            )
                        )
                        order_button.click()
                        
                        time.sleep(0.2)
                        return True
                        
                    except StaleElementReferenceException:
                        if attempt < max_retries - 1:
                            time.sleep(retry_delay)
                            continue
                        else:
                            print(f"Max retries reached for placing {side} order")
                            return False
                            
                    except Exception as e:
                        print(f"Error placing {side} order: {e}")
                        if attempt < max_retries - 1:
                            time.sleep(retry_delay)
                            continue
                        else:
                            return False

        def get_position(self):
                max_retries = 3
                retry_delay = 0.2
                
                for attempt in range(max_retries):
                    try:
                        position_element = WebDriverWait(self.driver, 5).until(
                            EC.presence_of_element_located((By.ID, 'nb_titres_a_decouvert_html'))
                        )
                        position_text = position_element.text
                        position = self.safe_parse_int(position_text.split(":")[1].strip().replace("+", ""))
                        return position
                    except Exception as e:
                        print(f"Error getting position: {e}")
                        if attempt < max_retries - 1:
                            time.sleep(retry_delay)
                            continue
                        else:
                            return 0
        def cancel_all_orders(self):
                try:
                    cancel_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@value='Cancel all orders']"))
                    )
                    cancel_button.click()
                    time.sleep(0.2)
                    return True
                except Exception as e:
                    print(f"Error cancelling orders: {e}")
                    return False

        def market_making_strategy(self):
                last_update_time = time.time()
                update_interval = 2
                
                while True:
                    try:
                        current_time = time.time()
                        
                        if current_time - last_update_time >= update_interval:
                            best_bid, best_ask, bids, asks = self.get_order_book_data()
                            position = self.get_position()
                            
                            if best_bid and best_ask:
                                bid_spread, ask_spread = self.adjust_spreads(best_bid, best_ask, position)
                                bid_price = round(best_bid - bid_spread, 2)
                                ask_price = round(best_ask + ask_spread, 2)
                                quantity = self.calculate_order_quantity(position)
                                
                                if abs(position) > self.max_position:
                                    if position > 0:
                                        ask_price = best_bid
                                        quantity = position // 2
                                    else:
                                        bid_price = best_ask
                                        quantity = abs(position) // 2
                                
                                self.cancel_all_orders()
                                time.sleep(0.2)
                                
                                self.place_order("buy", bid_price, quantity)
                                self.place_order("sell", ask_price, quantity)
                                
                                print(f"Orders placed - Bid: {bid_price}, Ask: {ask_price}, Position: {position}, Quantity: {quantity}")
                                last_update_time = current_time
                        
                        time.sleep(0.2)
                        
                    except KeyboardInterrupt:
                        print("\nBot stopped by user")
                        break
                    except Exception as e:
                        print(f"Error in market making strategy: {e}")
                        time.sleep(1)

        def run(self):
            try:
                self.login()
                self.access_simulation()
                print("Starting market making strategy...")
                self.market_making_strategy()
            except Exception as e:
                print(f"Bot error: {e}")
            finally:
                self.driver.quit()

        if __name__ == "__main__":
            bot = SimTradeBot()
            bot.run()