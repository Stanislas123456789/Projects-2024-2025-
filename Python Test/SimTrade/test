import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Configurer ChromeDriver
chrome_options = Options()
chrome_options.add_argument("--start-maximized")

# Chemin vers votre chromedriver
service = Service(r"C:\Program Files\Google\chromedriver-win64\chromedriver.exe")

# Démarrer Chrome avec Selenium
driver = webdriver.Chrome(service=service, options=chrome_options)

# Accéder à l'URL de la simulation
driver.get("https://www.simtrade.fr/CCMP/ESSEC_BBA/site/certifications/certifications_presentation.php?n=C&c=CERTIF2_US_FINANCE_ESSEC_BBA_2024_09&p=ESSEC2&lang=us#")

# Connexion
WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.LINK_TEXT, 'LOG IN'))).click()
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'nom_v3')))
driver.find_element(By.ID, 'nom_v3').send_keys('B00805678@essec.edu')
driver.find_element(By.ID, 'motdepasse_v3').send_keys('@Stan1244')
driver.find_element(By.XPATH, "//input[@value='Log in']").click()

# Accéder à la simulation
time.sleep(1)
driver.find_element(By.XPATH, "//a[contains(@href, 'challenges_presentation_certificat.php') and contains(., 'CONTESTS')]").click()
driver.find_element(By.XPATH, "//a[contains(@href, 'challenges_presentation.php?n=C&c=CONC_BPZ7_US_V6_ESSEC_BBA')]").click()
time.sleep(1)
driver.find_element(By.XPATH, "//input[@value='Launch the simulation']").click()

# Attendre que la simulation soit prête
time.sleep(5)  # Ajuste le temps selon le besoin

# Lire les nouvelles dans le bandeau défilant
def lire_nouvelles():
    try:
        news_element = driver.find_element(By.CSS_SELECTOR, "#simulation_bandeau_Defilant .tickercontainer")
        news_text = news_element.text
        return news_text
    except Exception as e:
        print(f"Erreur lors de la lecture des nouvelles : {e}")
        return ""

# Analyser les recommandations et l'indice de confiance
def analyser_recommandation(news_text):
    news_text = news_text.lower()
    
    if "lowers its recommendation from" in news_text:
        return "vendre"
    elif "increases its recommendation from" in news_text:
        return "acheter"
    
    if "decrease of" in news_text:
        return "vendre"
    elif "jump of" in news_text:
        return "acheter"
    
    if "rumor of a decrease in vat" in news_text:
        return "acheter"
    elif "rumor of an increase in vat" in news_text:
        return "vendre"
    
    return None

# Exécuter l'ordre d'achat ou de vente
def executer_ordre(action):
    try:
        cash_disponible = float(driver.find_element(By.ID, 'montant_cash_disponible').get_attribute('value'))
        titres_disponibles = float(driver.find_element(By.ID, 'nb_titres_disponibles').get_attribute('value'))

        if action == "acheter":
            montant = cash_disponible
            if montant > 0:
                driver.find_element(By.ID, 'montant_ordre').clear()  # Vider le champ
                driver.find_element(By.ID, 'montant_ordre').send_keys(str(montant))
                type_ordre_dropdown = Select(driver.find_element(By.ID, 'type_ordre'))
                type_ordre_dropdown.select_by_value('MAR')  # Market order
                
                buy_button = driver.find_element(By.XPATH, "//input[@value='Buy']")
                buy_button.click()
                print(f"Ordre d'achat passé pour {montant} €.")
            else:
                print("Pas de fonds disponibles pour acheter.")

        elif action == "vendre":
            if titres_disponibles > 0:
                driver.find_element(By.ID, 'qte_ordre').clear()  # Vider le champ
                driver.find_element(By.ID, 'qte_ordre').send_keys(str(titres_disponibles))
                type_ordre_dropdown = Select(driver.find_element(By.ID, 'type_ordre'))
                type_ordre_dropdown.select_by_value('MAR')  # Market order
                
                sell_button = driver.find_element(By.XPATH, "//input[@value='Sell']")
                sell_button.click()
                print(f"Ordre de vente passé pour {titres_disponibles} actions.")
            else:
                print("Pas de titres disponibles pour vendre.")
    except Exception as e:
        print(f"Erreur lors de l'exécution de l'ordre : {e}")

# Fonction principale pour lire les nouvelles et prendre des décisions
def decision():
    while True:
        try:
            news_text = lire_nouvelles()
            action = analyser_recommandation(news_text)
            
            if action:
                print(f"Nouvelles détectées: {news_text}")
                executer_ordre(action)
            else:
                print("Aucune action requise.")
            
            time.sleep(1)  # Attendre 1 seconde avant la prochaine lecture
        except Exception as e:
            print(f"Erreur dans la boucle de décision : {e}")

# Lancer la fonction principale
if __name__ == "__main__":
    try:
        decision()
    except KeyboardInterrupt:
        print("Arrêt du bot.")
    finally:
        driver.quit()
